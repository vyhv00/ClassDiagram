/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.vse.classdiagrampainter.gui;

import java.awt.BorderLayout;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import classDiagram.DiagramGUI;
import javax.tools.ToolProvider;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.vse.classdiagrampainter//WindowDia//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "WindowDiaTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.vse.classdiagrampainter.WindowDiaTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_WindowDiaAction",
        preferredID = "WindowDiaTopComponent"
)
@Messages({
    "CTL_WindowDiaAction=WindowDia",
    "CTL_WindowDiaTopComponent=WindowDia Window",
    "HINT_WindowDiaTopComponent=This is a WindowDia window"
})
public final class WindowDiaTopComponent extends TopComponent {

    private FileObject fileObject;
    private File path;
    private DiagramGUI diagram;

    private static final HashMap<FileObject, WindowDiaTopComponent> windows = new HashMap<>();

    private WindowDiaTopComponent() {
        initComponents();
        setToolTipText(Bundle.HINT_WindowDiaTopComponent());
        setLayout(new BorderLayout());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        if (diagram != null) {
            add(diagram.getFrame(), BorderLayout.CENTER);
            setName(diagram.getPkgName() + ": Class Diagram");
        } else {
            close();
        }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        if (diagram != null) {
            diagram.save();
        }
    }

    public void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        diagram.save();
        p.setProperty("pkgFile", path.getAbsolutePath());
    }

    public void readProperties(java.util.Properties p) {
        path = new File(p.getProperty("pkgFile"));
        try {
            fileObject = FileUtil.toFileObject(FileUtil.normalizeFile(path));
            windows.put(fileObject, this);
            prepareGraph();
            openGraph();
        } catch (IOException ex) {
            this.close();
            Exceptions.printStackTrace(ex);
        }
    }

    private void prepareGraph(FileObject context) throws IOException {
        path = FileUtil.toFile(context);
        prepareGraph();
    }

    private void prepareGraph() throws IOException {
        diagram = new DiagramGUI(path.getAbsolutePath());
    }

    public void openGraph() {
        diagram.open();
    }

    public void createGraph() throws IOException {
        try {
            if (this.isOpened()) {
                diagram.save();
            } 
            diagram.generate(ToolProvider.getSystemJavaCompiler());
            removeAll();
            add(diagram.getFrame());
            repaint();
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ONLY_OPENED;
    }

    /**
     * returns instance coresponding to a given FileObject. Every FileObject can
     * have at most one instance of graph window
     *
     * @param fileObject
     * @return
     */
    public static WindowDiaTopComponent getInstance(FileObject fileObject) throws IOException {
        WindowDiaTopComponent newInstance = windows.get(fileObject);
        if (newInstance == null) {
            newInstance = new WindowDiaTopComponent();
            windows.put(fileObject, newInstance);
            newInstance.prepareGraph(fileObject);
        }
        return newInstance;
    }
    
    public static boolean openable(String pakcagePath) {
        return DiagramGUI.openable(pakcagePath);
    }
}
